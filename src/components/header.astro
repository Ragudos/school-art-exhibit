---
import { THEME_KEY } from "@/lib/consts";
import logo from "@/assets/logo.png";
import { Image } from "astro:assets";
import {
	getAbsoluteLocaleUrl,
	getRelativeLocaleUrl,
	getRelativeLocaleUrlList,
} from "astro:i18n";
import { defaultLocale, supportedLocales } from "../../astro.config.mjs";

const locale = Astro.currentLocale;
const localeToLanguage: {
	[key in (typeof supportedLocales)[number]]: string;
} = {
	en: "English",
	tl_ph: "Filipino (Tagalog)",
};
const themes = ["light", "dark", "system"];
const iconIdPerTheme: {
	[key in (typeof themes)[number]]: string;
} = {
	light: "outline-sun",
	dark: "outline-moon",
	system: "outline-computer",
};
---

<header class="header">
	<div
		class="header__wrapper container flex justify-between gap-2 items-center"
	>
		<div class="flex gap-4 items-center">
			<a
				aria-label="Go to homepage"
				href={getRelativeLocaleUrl(locale || defaultLocale, "")}
				title="Home"
				class="w-fit h-fit inline-block"
			>
				<Image
					src={logo}
					width={48}
					alt=" "
					role="presentation"
					loading="eager"
					fetchpriority="high"
				/>
			</a>
			<details class="dropdown">
				<summary
					class="flex gap-2 items-center p-2 rounded-md justify-center"
				>
					<div class="sr-only">Current locale</div>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 24 24"
						stroke-width="1.5"
						stroke="currentColor"
						class="w-6 h-6"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							d="M12 21a9.004 9.004 0 0 0 8.716-6.747M12 21a9.004 9.004 0 0 1-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 0 1 7.843 4.582M12 3a8.997 8.997 0 0 0-7.843 4.582m15.686 0A11.953 11.953 0 0 1 12 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0 1 21 12c0 .778-.099 1.533-.284 2.253m0 0A17.919 17.919 0 0 1 12 16.5c-3.162 0-6.133-.815-8.716-2.247m0 0A9.015 9.015 0 0 1 3 12c0-1.605.42-3.113 1.157-4.418"
						></path>
					</svg>
					<div class="flex items-center gap-2">
						{localeToLanguage[Astro.currentLocale || defaultLocale]}
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 16 16"
							fill="currentColor"
							class="w-4 h-4"
						>
							<path
								fill-rule="evenodd"
								d="M5.22 10.22a.75.75 0 0 1 1.06 0L8 11.94l1.72-1.72a.75.75 0 1 1 1.06 1.06l-2.25 2.25a.75.75 0 0 1-1.06 0l-2.25-2.25a.75.75 0 0 1 0-1.06ZM10.78 5.78a.75.75 0 0 1-1.06 0L8 4.06 6.28 5.78a.75.75 0 0 1-1.06-1.06l2.25-2.25a.75.75 0 0 1 1.06 0l2.25 2.25a.75.75 0 0 1 0 1.06Z"
								clip-rule="evenodd"></path>
						</svg>
					</div>
				</summary>
				<div class="absolute z-20 left-0 md:left-0">
					<div
						class="relative top-1 w-40 rounded-md border border-accent bg-accent text-accent-foreground p-1 shadow-sm shadow-accent/50"
					>
						<div class="flex flex-col gap-px">
							<div class="mb-2 p-2 text-sm font-medium">
								Choose a language
							</div>
							{
								supportedLocales.map((locale) => {
									const isCurrentLocale =
										locale === Astro.currentLocale;
									const splitSlug =
										Astro.url.pathname.split("/");
									let slug;

									console.log(splitSlug);

									if (
										splitSlug.length < 3 ||
										splitSlug[2] === ""
									) {
										slug = splitSlug[1];
									} else {
										slug = splitSlug.slice(2).join("/");
									}

									if (supportedLocales.includes(slug)) {
										slug = "";
									}

									return (
										<a
											class:list={[
												{
													"bg-slate-200/20 hover:bg-slate-200/20":
														isCurrentLocale,
												},
												"language-option inline-flex w-full items-center gap-2 p-2 rounded-sm text-sm transition-colors duration-200 text-accent-foreground hover:bg-slate-200/10",
											]}
											href={getRelativeLocaleUrl(
												locale,
												slug,
											)}
										>
											{localeToLanguage[locale]}
										</a>
									);
								})
							}
						</div>
					</div>
				</div>
			</details>
			<details id="theme-dropdown" class="dropdown">
				<summary
					class="flex gap-2 items-center p-2 rounded-md justify-center w-10 h-10"
				>
					<div class="sr-only">Theme dropdown</div>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						viewBox="0 0 24 24"
						class="w-6 h-6"
						id="theme-icon__moon"
					>
						<use href="/icons.svg#outline-moon"></use>
					</svg>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						viewBox="0 0 24 24"
						class="w-6 h-6"
						id="theme-icon__sun"
					>
						<use href="/icons.svg#outline-sun"></use>
					</svg>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 24 24"
						stroke-width="1.5"
						stroke="currentColor"
						class="w-6 h-6"
						id="theme-icon__computer"
					>
						<use href="/icons.svg#outline-computer"></use>
					</svg>
				</summary>
				<div class="absolute z-20 left-0 md:left-0">
					<div
						class="relative top-1 w-40 rounded-md border border-accent bg-accent text-accent-foreground p-1 shadow-sm shadow-accent/50"
					>
						<div class="flex flex-col gap-px">
							<div class="mb-2 p-2 text-sm font-medium">
								Choose a theme
							</div>
							{
								themes.map((theme) => {
									return (
										<button
											class:list={[
												"inline-flex w-full items-center gap-2 p-2 rounded-sm text-sm transition-colors duration-200 text-accent-foreground hover:bg-slate-200/10",
											]}
											type="button"
											value={theme}
											name="set-theme__btn"
										>
											<span>{theme}</span>
											<svg
												xmlns="http://www.w3.org/2000/svg"
												viewBox="0 0 24 24"
												class="w-6 h-6"
											>
												<use
													href={`/icons.svg#${iconIdPerTheme[theme]}`}
												/>
											</svg>
										</button>
									);
								})
							}
						</div>
					</div>
				</div>
			</details>
			<style>
				#theme-dropdown summary svg {
					display: none;
				}

				#theme-dropdown[data-current="light"] svg#theme-icon__sun,
				#theme-dropdown[data-current="dark"] svg#theme-icon__moon,
				#theme-dropdown[data-current="system"]
					svg#theme-icon__computer {
					display: block;
				}

				#theme-dropdown[data-current="light"] button[value="light"],
				#theme-dropdown[data-current="dark"] button[value="dark"],
				#theme-dropdown[data-current="system"] button[value="system"] {
					@apply bg-slate-200/20;
				}
			</style>
			<script>
				function listener(event: Event) {
					const target = event.target;

					if (
						!(target instanceof HTMLElement) &&
						!(target instanceof SVGElement) &&
						!(target instanceof Element)
					) {
						return;
					}

					const currentlyOpenDropdown = document.querySelector(
						"details.dropdown[open]",
					);

					if (!currentlyOpenDropdown) {
						return;
					}

					if (!currentlyOpenDropdown.contains(target)) {
						currentlyOpenDropdown.removeAttribute("open");
					}
				}

				document.addEventListener("astro:before-preparation", () => {
					document.removeEventListener("click", listener);
				});

				document.addEventListener("astro:page-load", () => {
					document.addEventListener("click", listener);
				});
			</script>
			<script>
				import { THEME_KEY } from "@/lib/consts";

				let listeners: ((evt: Event) => void)[] = [];

				function setupThemeBtns() {
					try {
						let activeTheme = localStorage.getItem(THEME_KEY);

						if (activeTheme !== "light" && activeTheme !== "dark") {
							activeTheme = "system";
						}

						const themeDropdown =
							document.getElementById("theme-dropdown");
						const btns = document.querySelectorAll(
							"button[name='set-theme__btn']",
						) as NodeListOf<HTMLButtonElement>;

						if (btns.length === 0) {
							return;
						}

						themeDropdown?.setAttribute(
							"data-current",
							activeTheme,
						);

						btns.forEach((btn) => {
							const listener = (evt: Event) => {
								const theme = btn.value;

								themeDropdown?.setAttribute(
									"data-current",
									theme,
								);

								if (theme === "system") {
									if (
										window.matchMedia(
											"(prefers-color-scheme: dark)",
										).matches
									) {
										document.documentElement.setAttribute(
											"data-theme",
											"dark",
										);
									} else {
										document.documentElement.setAttribute(
											"data-theme",
											"light",
										);
									}
								} else {
									document.documentElement.setAttribute(
										"data-theme",
										theme,
									);
								}

								localStorage.setItem(THEME_KEY, theme);
							};

							btn.addEventListener("click", listener);
						});
					} catch (_err) {}
				}

				document.addEventListener("astro:before-preparation", () => {
					const btns = document.querySelectorAll(
						"button[name='set-theme__btn']",
					) as NodeListOf<HTMLButtonElement>;

					if (btns.length === 0) {
						return;
					}

					for (let i = 0; i < btns.length; ++i) {
						const listener = listeners[i];

						if (listener) {
							btns[i].removeEventListener("click", listener);
						}
					}

					listeners = [];
				});

				document.addEventListener("astro:after-swap", () => {
					setupThemeBtns();
				});

				setupThemeBtns();
			</script>
		</div>
		<div class="flex justify-end gap-4 items-center">
			<a
				href={`/${locale}/trailer`}
				class="bg-primary gap-2 text-primary-foreground px-4 py-2 rounded-md inline-flex justify-center items-center hover:translate-y-1 duration-200 transition-[transform,box-shadow] will-change-[transform,box-shadow] shadow-primary shadow-xl hover:shadow-md hover:shadow-primary/50"
			>
				<span>Trailer</span>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					class="w-6 h-6"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						d="M3.375 19.5h17.25m-17.25 0a1.125 1.125 0 0 1-1.125-1.125M3.375 19.5h1.5C5.496 19.5 6 18.996 6 18.375m-3.75 0V5.625m0 12.75v-1.5c0-.621.504-1.125 1.125-1.125m18.375 2.625V5.625m0 12.75c0 .621-.504 1.125-1.125 1.125m1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125m0 3.75h-1.5A1.125 1.125 0 0 1 18 18.375M20.625 4.5H3.375m17.25 0c.621 0 1.125.504 1.125 1.125M20.625 4.5h-1.5C18.504 4.5 18 5.004 18 5.625m3.75 0v1.5c0 .621-.504 1.125-1.125 1.125M3.375 4.5c-.621 0-1.125.504-1.125 1.125M3.375 4.5h1.5C5.496 4.5 6 5.004 6 5.625m-3.75 0v1.5c0 .621.504 1.125 1.125 1.125m0 0h1.5m-1.5 0c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125m1.5-3.75C5.496 8.25 6 7.746 6 7.125v-1.5M4.875 8.25C5.496 8.25 6 8.754 6 9.375v1.5m0-5.25v5.25m0-5.25C6 5.004 6.504 4.5 7.125 4.5h9.75c.621 0 1.125.504 1.125 1.125m1.125 2.625h1.5m-1.5 0A1.125 1.125 0 0 1 18 7.125v-1.5m1.125 2.625c-.621 0-1.125.504-1.125 1.125v1.5m2.625-2.625c.621 0 1.125.504 1.125 1.125v1.5c0 .621-.504 1.125-1.125 1.125M18 5.625v5.25M7.125 12h9.75m-9.75 0A1.125 1.125 0 0 1 6 10.875M7.125 12C6.504 12 6 12.504 6 13.125m0-2.25C6 11.496 5.496 12 4.875 12M18 10.875c0 .621-.504 1.125-1.125 1.125M18 10.875c0 .621.504 1.125 1.125 1.125m-2.25 0c.621 0 1.125.504 1.125 1.125m-12 5.25v-5.25m0 5.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125m-12 0v-1.5c0-.621-.504-1.125-1.125-1.125M18 18.375v-5.25m0 5.25v-1.5c0-.621.504-1.125 1.125-1.125M18 13.125v1.5c0 .621.504 1.125 1.125 1.125M18 13.125c0-.621.504-1.125 1.125-1.125M6 13.125v1.5c0 .621-.504 1.125-1.125 1.125M6 13.125C6 12.504 5.496 12 4.875 12m-1.5 0h1.5m-1.5 0c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125M19.125 12h1.5m0 0c.621 0 1.125.504 1.125 1.125v1.5c0 .621-.504 1.125-1.125 1.125m-17.25 0h1.5m14.25 0h1.5"
					></path>
				</svg>
			</a>
		</div>
	</div>
</header>
<style>
	.header {
		--_height: 6rem;

		height: var(--_height);

		display: flex;
		align-items: center;
	}
</style>
